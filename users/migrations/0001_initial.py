# Generated by Django 3.1.7 on 2021-03-28 11:51

import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import imagekit.models.fields
import users.models
import users.storage


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, help_text='Required. Format: example@mail.com', max_length=254, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='email address')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=75, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=75, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', users.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='users.user')),
                ('bio', models.CharField(blank=True, max_length=150, verbose_name='bio')),
                ('visibility', models.IntegerField(choices=[(0, 'Public'), (1, 'Private')], default=0)),
                ('points', models.IntegerField(default=0, verbose_name='Total points achieved by user')),
                ('image', imagekit.models.fields.ProcessedImageField(blank=True, help_text='Profile Picture', storage=users.storage.OverwriteStorage(), upload_to=users.models.profile_image_upload_path, verbose_name='Profile Picture')),
                ('cover_image', imagekit.models.fields.ProcessedImageField(blank=True, help_text='Profile Cover Picture', storage=users.storage.OverwriteStorage(), upload_to=users.models.profile_cover_image_upload_path, verbose_name='Profile Cover Picture')),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
            },
        ),
        migrations.CreateModel(
            name='UserFollows',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('followed_on', models.DateTimeField(auto_now_add=True)),
                ('following_user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to='users.profile')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to='users.profile')),
            ],
            options={
                'verbose_name': 'User Follows',
                'verbose_name_plural': 'User Follows',
                'unique_together': {('user_profile', 'following_user_profile')},
            },
        ),
    ]
